`ifndef rhuDebugPool__svh
`define rhuDebugPool__svh
/************************************************************************************/
// Author: RyanHunter
// Created: 2022-12-19 08:23:57 -0500
// Description:
// This file is automatically generated by MDC-v2, any issues found
// here should be modified in its source markdown document the same
// dir structure in Git/Obsidian/...
/************************************************************************************/

class RhuDebugPool extends uvm_object;
	`include "uvm_macros.svh"
	import uvm_pkg::*;
	typedef string rhudbgStringQueue_t [$];
	static RhuDebugPool sInst;
	uvm_object fullInstPaths[string];
	string enabledIDs[string];
	string processedIDs[string];
	`uvm_object_utils_begin(RhuDebugPool)
	`uvm_object_utils_end
	extern static function RhuDebugPool getGlobalPool();
	extern function  new(string name="RhuDebugPool");
	extern function void register(uvm_object obj,string objType);
	extern function void __setupUserOptions__();
	extern local function void __splitUserOption__(string option,ref string paths[$],ref string ids[$]);
	extern local function void __splitOnePathIdOption__(string option, ref string path, ref string id);
	extern function void processDisplayID(string id,uvm_object obj);
	extern local function void __addProcessedID__(string id,string path);
	extern local function bit __processedID__(string id,string path);
	extern local function rhudbgStringQueue_t __splitidsToQueue__(string s);
	extern local function uvm_component isaComponent(uvm_object obj);
endclass
function RhuDebugPool RhuDebugPool::getGlobalPool();
	if (sInst==null) sInst = new("globalPool");
	return sInst;
endfunction
function  RhuDebugPool::new(string name="RhuDebugPool");
	super.new(name);
	__setupUserOptions__;
endfunction
function void RhuDebugPool::register(uvm_object obj,string objType);
	
endfunction
function void RhuDebugPool::__setupUserOptions__();
	string option;
	string paths[$];
	string ids[$];
	
	// version 1, only support adding once through the user command line.
	$value$plusargs("RHUDBG=%s",option);
	__splitUserOption__(option,paths,ids);
	foreach (paths[i]) enabledIDs[paths[i]] = ids[i];
	
endfunction
function void RhuDebugPool::__splitUserOption__(string option,ref string paths[$],ref string ids[$]);
	string options[$];
	int len = option.len();int lastpos = 0;
	if (option[len-1]==";") option = option.substr(0,len-2);
	
	for (int idx=0;idx<option.len();idx++) begin
		if (option[idx]==";") begin
			options.push_back(option.substr(lastpos,idx-1));
			lastpos = idx+1;
		end
	end
	foreach (options[i]) begin
		string path, id;
		__splitOnePathIdOption__(options[i],path,id);
		paths.push_back(path);
		ids.push_back(id);
	end
endfunction
function void RhuDebugPool::__splitOnePathIdOption__(string option, ref string path, ref string id);
	int len = option.len();
	for (int i=0;i<len;i++) begin
		if (option[i]==",") begin
			path = option.substr(0,i-1);
			id   = option.substr(i+1,len-1);
		end
	end
	return;
endfunction
function void RhuDebugPool::processDisplayID(string id,uvm_object obj);
	if (__processedID__(id,obj.get_full_name())) return;
	begin
		uvm_component comp=isaComponent(obj);
		uvm_report_handler rh;
		UVM_FILE file = $fopen({obj.get_full_name(),".log"},"w");
		if (comp==null) begin
			uvm_coreservice_t cs=uvm_coreservice_t::get();
			uvm_root top = cs.get_root();
			rh=top.m_rh;
		end else rh=comp.m_rh;
		rh.set_severity_id_file(UVM_INFO,id,file);
		rh.set_severity_id_action(UVM_INFO,id,UVM_LOG);
		__addProcessedID__(id,obj.get_full_name());
	end
	return;
endfunction
function void RhuDebugPool::__addProcessedID__(string id,string path);
	string newline = "";
	if (processedIDs.exists(path)) newline = processedIDs[path];
	newline = {newline,id,"|"};
	processedIDs[path] = newline;
endfunction
function bit RhuDebugPool::__processedID__(string id,string path);
	if (!processedIDs.exists(path)) return 1'b0;
	begin
		string ids[$] = __splitidsToQueue__(processedIDs[path]);
		foreach (ids[i]) if (ids[i]==id) return 1'b1;
	end
	return 1'b0;
endfunction
function rhudbgStringQueue_t RhuDebugPool::__splitidsToQueue__(string s);
	int len = s.len();
	string q[$];
	int lastpos = 0;
	for (int index=0;index<len;index++) begin
		if (s[index]=="|") begin
			q.push_back(s.substr(lastpos,index-1));
			lastpos = index+1;
		end
	end
	return q;
endfunction
function uvm_component RhuDebugPool::isaComponent(uvm_object obj);
	uvm_component comp;
	if ($cast(comp,obj)) return comp;
	else return null;
endfunction

`endif
