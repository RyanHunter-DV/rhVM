`ifndef baseTest__svh
`define baseTest__svh

// uvm_env: baseEnv
// This class generated by snippet: 'env', if has any issue, pls report to RyanHunter
class baseEnv extends uvm_env;
	RhuDebugger debug;
	`uvm_component_utils_begin(baseEnv)
	`uvm_component_utils_end
	function new(string name="baseEnv",uvm_component parent=null);
		super.new(name,parent);
		debug=new(this,"component");
	endfunction
	// phases ##{{{
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual function void connect_phase(uvm_phase phase);
	extern virtual task run_phase(uvm_phase phase);
	// ##}}}
	extern function void callerTest (int ia);
endclass
function void baseEnv::callerTest(int ia); // ##{{{
	string file;int line;
	`caller0(file,line)
	`debug($sformatf("callerTest, function called by: %s,%0d",file,line))
	`debug($sformatf("callerTest, input ia: %0d",ia))
	return;
endfunction // ##}}}
function void baseEnv::build_phase(uvm_phase phase); // ##{{{
	super.build_phase(phase);
	`debug("local build_phase starting ...")
	//TODO,add code here
	fork
		`debugCall("",callerTest(0))
		`debugCall("",callerTest(1))
	join
	begin
		int ia=0;
		// do not use debugCall to execute a line expression, use debugLine
		// instead
		`debugLine("add one expression",ia=10)
	end
	`debugCall("after expression line",callerTest(2))
	`debug("local build_phase leaving ...")
	debug.updateChildren(this);
endfunction // ##}}}
function void baseEnv::connect_phase(uvm_phase phase); // ##{{{
	super.connect_phase(phase);
endfunction // ##}}}
task baseEnv::run_phase(uvm_phase phase); // ##{{{
	super.run_phase(phase);
endtask // ##}}}

// uvm_test: baseTest
// This class generated by snippet: 'test', if has any issue, pls report to RyanHunter
class baseTest extends uvm_test;
	baseEnv env;
	`uvm_component_utils_begin(baseTest)
	`uvm_component_utils_end
	function new(string name="baseTest",uvm_component parent=null);
		super.new(name,parent);
	endfunction
	// phases ##{{{
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual function void connect_phase(uvm_phase phase);
	extern virtual task run_phase(uvm_phase phase);
	// ##}}}
endclass
function void baseTest::build_phase(uvm_phase phase); // ##{{{
	super.build_phase(phase);
	//TODO,add code here
	env = baseEnv::type_id::create("env",this);
endfunction // ##}}}
function void baseTest::connect_phase(uvm_phase phase); // ##{{{
	super.connect_phase(phase);
endfunction // ##}}}
task baseTest::run_phase(uvm_phase phase); // ##{{{
	super.run_phase(phase);
endtask // ##}}}
`endif
